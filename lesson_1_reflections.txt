How did viewing a diff between two versions of a file help you see the bug that was introduced?
1. Automate work that would otherwise take long time
2. Ensure nothing is missed by the human eye

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
1. Remove the hassle and overhead of manually doing version control by saving old files.
2. Standardize the method of storing versions of a file or folder structure.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
1. Only changes that make sense (or should make sense) are committed. You don't get half sentences or code (in case of programming) that doesn't compile or run.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
1. Some functions/features span multiple files. It makes more sense to commit them as a unit and later be able to compare them as a unit than individually.

How can you use the commands git log and git diff to view the history of files?
1. Use git log to review history of repository commits
2. use git diff to wiev changes between individual commits.

How might using version control make you more confident to make changes that could break something?
1. No problem. Can always revert to a version that works. Find the issue and fix it.

Now that you have your workspace set up, what do you want to try using Git for?
1. Development projects
